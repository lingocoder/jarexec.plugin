plugins {
    id 'groovy'
    id 'java-gradle-plugin'    
    id 'maven-publish'
    id 'idea'
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.5"
    id 'com.gradle.build-scan' version '2.3'
}

group = 'com.lingocoder'
version = '0.3'
description = 'A Gradle plugin that executes Java Jar files'

apply from: 'gradle/sourcesets/custom.sourcesets.gradle'

gradlePlugin {
    plugins {
        jarexecPlugin {
            id = 'com.lingocoder.jarexec'
            implementationClass = 'com.lingocoder.plugin.jarexec.JarExecPlugin'
        }
    }

    testSourceSets sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest
}

repositories{
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies{

    /* JDK 9+ sources may have dependencies on JDK 8- sources in the same project.   */
    /* This next line configures that dependency. This way, we avoid recompiling the */
    /* JDK 8- soures if it's not necessary. */
    
    java9Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }
    java11Implementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }
    
    /* The java-gradle-plugin apparently configures the gradle API dependencies only for the         */
    /* default main source set. This next line is needed to explictly set it for JDK 9+ compilation. */

    java9Implementation gradleApi()
    java11Implementation gradleApi()


    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha4'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.0-alpha-4'
    testImplementation(group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5') {
        exclude module: 'org.codehaus.groovy'
    }
    
    testRuntimeOnly group: 'org.raml.jaxrs', name: 'raml-to-jaxrs-cli', classifier: 'jar-with-dependencies', version: '3.0.5'
}

compileJava {
   sourceCompatibility = 8
   targetCompatibility = 8
}

compileJava9Java {
   sourceCompatibility = 9
   targetCompatibility = 9
}

compileJava11Java {
   sourceCompatibility = 11
   targetCompatibility = 11
}

jar {
   into('META-INF/versions/9') {
      from sourceSets.java9.output
   }
   into('META-INF/versions/11') {
      from sourceSets.java11.output
   }
   manifest.attributes(
      'Multi-Release': 'true'
   )
}

publishing {
    repositories {
        maven {
            url '../consuming/maven-repo'
        }
        ivy {
            url '../consuming/ivy-repo'
        }
    }
}

task fixIdeaPluginClasspath {
    doFirst {
        configure(tasks.pluginUnderTestMetadata) {
            def ideaClassesPath = project.buildDir.toPath().resolveSibling("out").resolve("production")
            def newClasspath = pluginClasspath as List
            newClasspath.add(0, ideaClassesPath)
            pluginClasspath.setFrom(newClasspath)
        }
    }
}

pluginUnderTestMetadata.mustRunAfter(fixIdeaPluginClasspath)

idea.project.settings {
    taskTriggers {
        beforeBuild fixIdeaPluginClasspath, pluginUnderTestMetadata
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

